oneHundredFromTWithDF12()
oneHundredFromTWithDF12()
oneHundredFromTWithDF12() |> testJB()
oneHundredFromTWithDF12() |> testJB() |> _['reject']
sapply(1:10^4, oneHundredFromTWithDF12() |> testJB() |> _['reject']) |> (\(x) sum(x)/length(x))()
sapply(1:10^4, \(x) rt(100, df = 12) |> testJB() |> _['reject']) |> (\(x) sum(x)/length(x))()
sapply(1:10^4, \() rt(100, df = 12) |> testJB() |> _['reject']) |> (\(x) sum(x)/length(x))()
sapply(1:10^4, \(x) rt(100, df = 12) |> testJB() |> _['reject']) |> (\(x) sum(x)/length(x))()
install.packages('lmtest')
lmtest::dwtest()
lmtest::dwtest
testy <- rnorm(100)
testx <- testy + 1 + 0.1 * rnorm(1)
lmtest(testy ~ testx)
lmtest::dwtest(testy ~ testx)
lmtest::dwtest(testy ~ testx)
lag(testy)
testy
?lag
lag(testy, 2)
diff(testy)
?diff
diff(1:10)
testDW <- function(x, y){
res <- y - x
sum(diff(res)^2) / sum(res^2)
}
testDW(testx, testy)
xx <- testy - testx
xx
rnorm(1)
rnorm(1)
testx <- testy + 1 + 0.1 * rnorm(1)
testx
testy
testy - testx
testx <- testy + 1 + rnorm(1)
testy - testx
testy
c(1, 2) - c(0, 1)
c(1, 2) - c(0, 2)
testx <- testy + 1 + rnorm(100)
testx
testy - testx
testx <- testy + 1 + 0.1 * rnorm(100)
testy-testx
xx <- testy - testx
testDW(testx, testy)
testDW(testx, testy)
testDW(testx, testy)
testDW(testx, testy)
lmtest::dwtest(testy ~ testx)
diff(xx)
diff(xx)^2
sum(diff(xx)^2)
sum(xx^2)
testDW <- function(x, y){
res <- x - y
sum(diff(res)^2) / sum(res^2)
}
testDW(testx, testy)
testDW(testy, testx)
1:10 + rnorm(10)
lmtest::dwtest(1:10 + rnorm(10))
xx <- 1:10 + 0.5 * rnorm(10)
lmtest::dwtest(xx)
lmtest::dwtest(xx ~ xx)
?predict
lmtest::dwtest(xx ~ xx + 1)
lmtest::dwtest(xx ~ xx - 1)
yy <- xx - 1
lmtest::dwtest(yy ~ xx)
lmtest::dwtest(yy ~ xx)
head(mtcars)
err1 <- rnorm(100)
x <- rep(c(-1,1), 50)
y1 <- 1 + x + err1
x
y1
dwtest(y1 ~ x)
lmtest::dwtest(y1 ~ x)
err2 <- filter(err1, 0.9, method="recursive")
y2 <- 1 + x + err2
dwtest(y2 ~ x)
err2 <- filter(err1, 0.9, method="recursive")
y2 <- 1 + x + err2
lmtest::dwtest(y2 ~ x)
testDW(x, y1)
residuals
?residuals
lm(y1 ~ x)
lm(y1 ~ x) |> residuals()
y1 - x
x - y1
lm(y1 ~ x)['residuals']
testDW <- function(model){
res <- model |> residuals()
sum(diff(res)^2) / sum(res^2)
}
testDW(lm(y1 ~ x))
lmtest(y1 ~ x)
lmtest::dwtest(y1 ~ x)
library(stats)
x
y1
lmtest(y1 ~ x)$residuals
lm(y1 ~ x)['residuals']
lm(y1 ~ x)['residuals'] |> stats::Box.test()
lm(y1 ~ x)['residuals'] |> typeof()
lm(y1 ~ x)['residuals'] |> as.numeric()
lm(y1 ~ x) |> _['residuals']
lm(y1 ~ x) |> _['residuals']$residuals
lm(y1 ~ x)$residuals
lm(y1 ~ x)$residuals |> stats::Box.test()
lm(y1 ~ x)$residuals |> stats::Box.test(type="Ljung-Box")
lm(y1 ~ x) |> length()
lm(y1 ~ x)
modddd <- lm(y1 ~ x)
modddd$model
typeof(modddd)
modddd$model |> length()
modddd$model[0]
modddd$model[[1]]
modddd$model[[2]]
modddd |> model()
modddd |> _['model']
modddd |> _['model'][[1]] |> length()
modddd |> _['model']
modddd |> _['model'] |> _[1, ]
modddd |> _['model'] |> _[[1, ]]
modddd |> _['model'] |> `[`(1)
modddd |> _['model'] |> `[[`(1)
modddd$model
modddd$model |> length()
modddd$model[[1]]
cov
cov(modddd |> residuals(), modddd |> residuals |> lag())
cov(modddd |> residuals(), modddd |> residuals() |> lag())
lag(modddd |> residuals(), 2)
lag(modddd |> residuals(), 3)
lag(modddd |> residuals(), 4)
lag(modddd |> residuals(), 4) |> var()
lag(modddd |> residuals(), 3) |> var()
?lag
lag(modddd |> residuals(), 3) |> ts()
lag(modddd |> residuals(), 3) |> ts() |> var()
lag(modddd |> residuals(), 4) |> ts() |> var()
lag(modddd |> residuals(), 4) |> ts()
lag(modddd |> residuals() |> ts(), 4)
lag(modddd |> residuals() |> ts(), -4)
lag(modddd |> residuals() |> ts(), -1)
lag(modddd |> residuals() |> ts(), -1) |> var()
lag(modddd |> residuals() |> ts(), -2) |> var()
lag(modddd |> residuals() |> ts(), -3) |> var()
stats::acf(modddd |> residuals())
stats::acf(modddd |> residuals(), plot = FALSE)
1:10[1,]
1:10[1]
1:10[2]
1:10[[1]]
1:10 |> subset(2:10)
1:10 |> subset()
1:10 |> subset(2)
1:10[1:2]
1:10[c(2,3)]
xx <- 1:10
xx[1]
xx[2]
rho <- \(k) cov(res[1:(n-k)], res[k:n]) / sqrt(var(res) * var(res[k:n]))
res <- model |> residuals()
res <- modddd |> residuals()
res
rho <- \(k) cov(res[1:(n-k)], res[k:n]) / sqrt(var(res) * var(res[k:n]))
rho(1)
n <- modddd$model[[1]] |> length()
rho(1)
res[1:(n-1)]
res[2:n]
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
res[2:n]
rho(1)
rho(2)
rho(3)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, rho(k) / (n - k)) |> sum())
testValue
}
testLB(model)
modddd
testLB(modddd)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, \(k) rho(k) / (n - k)) |> sum())
testValue
}
testLB(modddd)
stats::Box.test(modddd)
stats::Box.test(modddd$residuals)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, \(k) rho(k)^2 / (n - k)) |> sum())
testValue
}
stats::Box.test(modddd$residuals)
testLB(modddd)
stats::Box.test(modddd$residuals, type="Box-Ljung")
stats::Box.test(modddd$residuals, type="Ljung-Box")
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, \(k) rho(k)^2 / (n - k + 1)) |> sum())
testValue
}
testLB(modddd)
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:(lag+1), \(k) rho(k)^2 / (n - k)) |> sum())
testValue
}
testLB(modddd)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, \(k) rho(k)^2 / (n - k - 1)) |> sum())
testValue
}
testLB(modddd)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
testValue <- n * (n+2) * (sapply(1:lag, \(k) rho(k)^2 / (n - k + 1)) |> sum())
testValue
}
testLB(modddd)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(1:lag, \(k) rho(k))
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
testValue
}
testLB(modddd)
stats::Box.test(modddd$residuals, type="Ljung-Box", lag=2)
testLB(modddd, lag = 2)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(1:lag, \(k) rho(k))
testValue <- n * (n+2) * sum(1/seq.int(n, n - lag) * obs^2)
testValue
}
testLB(modddd, lag = 2)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(1:lag, \(k) rho(k))
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
testValue
}
testLB(modddd, lag = 2)
testLB(modddd, lag = 3)
stats::Box.test(modddd$residuals, type="Ljung-Box", lag=3)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(1:lag, \(k) rho(k))
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n, n - lag - 1) * obs^2)
testValue
}
testLB(modddd, lag = 3)
testLB(modddd, lag = 2)
testLB <- function(model, lag = 1){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(1:lag, \(k) rho(k))
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n, n - lag + 1) * obs^2)
testValue
}
testLB(modddd, lag = 2)
testLB(modddd, lag = 1)
stats::Box.test(modddd$residuals, type="Ljung-Box", lag=1)
testJB <- function(data, alpha = 0.05) {
stopifnot(is.vector(data))
stopifnot(is.numeric(p) && p > 0 && p <= 1)
if(length(data) < 1000) warning("JB test for small samples is prone to false positives")
n <- length(data)
centered <- data - mean(data)
skewnessNumerator <- 1/n * sum(centered^3)
skewnessDenominator <- (1/n * sum(centered^2))^(3/2)
skewness <- skewnessNumerator / skewnessDenominator
kurtosisNumerator <- 1/n * sum(centered^4)
kurtosisDenominator <- (1/n * sum(centered^2))^2
kurtosis <- kurtosisNumerator / kurtosisDenominator
testValue <- n/6 * (skewness^2 + 1/4 * (kurtosis - 3)^2)
pValue <- 1 - pchisq(testValue, df = 2)
c(`Test Statistic` = testValue, `p-value` = pValue, reject = pValue < alpha)
}
testJB(quantileData)
testJB <- function(data, alpha = 0.05) {
stopifnot(is.vector(data))
stopifnot(is.numeric(alpha) && alpha > 0 && alpha <= 1)
if(length(data) < 1000) warning("JB test for small samples is prone to false positives")
n <- length(data)
centered <- data - mean(data)
skewnessNumerator <- 1/n * sum(centered^3)
skewnessDenominator <- (1/n * sum(centered^2))^(3/2)
skewness <- skewnessNumerator / skewnessDenominator
kurtosisNumerator <- 1/n * sum(centered^4)
kurtosisDenominator <- (1/n * sum(centered^2))^2
kurtosis <- kurtosisNumerator / kurtosisDenominator
testValue <- n/6 * (skewness^2 + 1/4 * (kurtosis - 3)^2)
pValue <- 1 - pchisq(testValue, df = 2)
c(`Test Statistic` = testValue, `p-value` = pValue, reject = pValue < alpha)
}
testJB(quantileData)
seq.int(100-1, 100-1)
1 / seq.int(100-1, 100-1)
rho(modddd |> residuals())
rho(1)
sapply(1:10, rho)
stats:acf(modddd$residuals)
stats::acf(modddd$residuals)
stats::acf(modddd$residuals), plot=FALSE)
stats::acf(modddd$residuals, plot=FALSE)
stats::acf(modddd$residuals, plot=FALSE)[2:]
stats::acf(modddd$residuals, plot=FALSE)[2:20]
stats::acf(modddd$residuals, plot=FALSE)[1:20]
testLB <- function(model, lag = 1, ){
testLB <- function(model, lag = 1, a;pha = 0.05){
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
##rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
##obs <- sapply(1:lag, rho)
obs <- stats::acf(res)[2:lag+1]
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
testValue
}
testLB(modddd)
stats::acf(modddd$residuals, plot=FALSE)[2:2
stats::acf(modddd$residuals, plot=FALSE)[2:2]
stats::acf(modddd$residuals, plot=FALSE)[2:2]
stats::acf(modddd$residuals, plot=FALSE)[2:2]$acf
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
##rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
##obs <- sapply(1:lag, rho)
obs <- stats::acf(res)[2:lag+1]$acf
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
testValue
}
stats::acf(modddd$residuals, plot=FALSE)[2:2]$acf
testLB(modddd)
stats::acf(modddd$residuals, plot=FALSE, lag.max = 1)
stats::acf(modddd$residuals, plot=FALSE, lag.max = 1)$acf
stats::acf(modddd$residuals, plot=FALSE, lag.max = 1)$acf[2:2]
obs <- stats::acf(res, lag.max = lag)$acf[2:(lag+1)]
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
## Zgadza sie z stats::acf
##rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
##obs <- sapply(1:lag, rho)
obs <- stats::acf(res, lag.max = lag)$acf[2:(lag+1)]
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
testValue
}
testLB(modddd)
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
stats::acf(modddd$residuals, plot=FALSE, lag.max = 1)$acf[2:2]
res <- modddd |> residuals()
rho(1)
lag(res, 1)
lag(res, 1) - mean(res)
sum(lag(res, 1) - mean(res))
sum(res - mean(res))
rho <- \(k) cov(res[1:(n-k)], res[(k+1):n]) / sqrt(var(res) * var(res[(k+1):n]))
obs <- sapply(0:lag, rho)
sapply(0:1, rho)
sum(NA)
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[k+1, length(x)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
rho(1)
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[k+1:length(x)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
rho(1)
debugSource("E:/studies/PNA/Z3_Nowacki.R")
testLB(modddd)
laggedNormal
normalized
mean(x)
mean(x)
x
sum(x)
laggedNormal
k
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[1:(length(x) - k)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
rho(1)
stats::acf(res)
stats::acf(res, print=FALSE)
stats::acf(res,plot = FALSE)
stats::acf(res,plot = FALSE)$acf
rho(1)
rho(2)
rho(3)
rho(4)
rho(5)
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[1:(length(x) - k)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
obs <- sapply(1:lag, rho)
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
testValue
}
testLB(modddd)
stats::Box.test(modddd, type="Ljung-Box")
stats::Box.test(modddd|>residuals(), type="Ljung-Box")
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[1:(length(x) - k)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
obs <- sapply(1:lag, rho)
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
c(`Test Value` = testValue, `p-value` = pValue, reject = p < alpha)
}
testLB(modddd)
testLB <- function(model, lag = 1, alpha = 0.05){
res <- model |> residuals()
n <- model$model[[1]] |> length()
rho <- function(k, x = res) {
meanx <- mean(x)
normalized <- x - meanx
laggedNormal <- c(rep(NA, k), x[1:(length(x) - k)]) - meanx
sum(normalized * laggedNormal, na.rm = TRUE) / sum(normalized^2)
}
obs <- sapply(1:lag, rho)
## Nie zgadza sie z stats:Box.test(type="Ljung-Box") :(
testValue <- n * (n+2) * sum(1/seq.int(n - 1, n - lag) * obs^2)
pValue <- 1 - pchisq(testValue, lag)
c(`Test Value` = testValue, `p-value` = pValue, reject = pValue < alpha)
}
testLB(modddd)
testLB(modddd, lag = 2)
stats::Box.test(modddd|>residuals(), type="Ljung-Box", lag=2)
dane77 <- df(kobiety=c(20,60,40), mezczyzni=c(45,15,20))
?df
dane77 <- data.frame(kobiety=c(20,60,40), mezczyzni=c(45,15,20))
dane77
row.names(dane77) <- c("A", "B", "same")
dane77
prop.table(dane77)
